<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript Outline</title>
    <link href="/2023/01/10/JavaScript-Outline/"/>
    <url>/2023/01/10/JavaScript-Outline/</url>
    
    <content type="html"><![CDATA[<p>#本篇纯属练手之作#</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide">指路MDN</a></p><h2 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h2><h3 id="Special-comment"><a href="#Special-comment" class="headerlink" title="Special comment"></a>Special comment</h3><ul><li>hashbang comment</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#!usr\bin\env node<br><span class="hljs-comment">/*this is used to specify the path to a particular JavaScript engine * that should execute the script, only appear in the most front of all content</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="Variable-declaration"><a href="#Variable-declaration" class="headerlink" title="Variable declaration"></a>Variable declaration</h3><ul><li><p><code>var</code> declares a variable</p></li><li><p><code>let</code> declares a block-scoped, local variable</p></li><li><p><code>const</code> declares  a block-scoped, read-only named constant, and always needs an initializer</p></li></ul><blockquote><p><span style="color:green">Note: variables usually start with a letter, (_) or ($), numbers can later</span></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//below shows how to use the three keyword</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-keyword">const</span> &#123;bar&#125; = foo;<span class="hljs-comment">//this will assign the value of &quot;bar&quot; from object &quot;foo&quot; to &quot;bar&quot;</span><br><br></code></pre></td></tr></table></figure><blockquote><p><span style="color:green">Note: <code>var</code> always declares a global variable. You can refer to the variable even before its declaration but only with value “undefined”. This feature is called “<a href="_" title="提升">hoisting</a>“</span></p></blockquote><p>About constants: Re-assignments of constants isn’t allowed, but properties of objects can be changed without problems.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MY_OBJECT</span> = &#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;value&#x27;</span>&#125;;<br><span class="hljs-variable constant_">MY_OBJECT</span>.<span class="hljs-property">key</span> = <span class="hljs-string">&#x27;othervalue&#x27;</span>;<br></code></pre></td></tr></table></figure><p>Also, operations on an array are allowed.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MY_ARRAY</span> = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;nice&#x27;</span>];<br><span class="hljs-variable constant_">MY_ARRAY</span>.<span class="hljs-title function_">pop</span>();<span class="hljs-comment">//the same effect as MY_ARRAY[1] = &#x27;world&#x27;;</span><br><span class="hljs-variable constant_">MY_ARRAY</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;world&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable constant_">MY_ARRAY</span>);<span class="hljs-comment">//output is: [&#x27;hello&#x27;,&#x27;world&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h3><p>Seven types of primitives:</p><ul><li>Boolean</li><li>null</li><li>undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ul><blockquote><p><span style="color:green">Note: these data types are automatically converted as needed during script execution, which means one type of a variable can be mutated into another type</span></p></blockquote><p>Special ‘+’ operator : convert numeric value to string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">x = <span class="hljs-string">&#x27;The answer is &#x27;</span> + <span class="hljs-number">42</span>;<span class="hljs-comment">//&quot;The answer is 42&quot;</span><br>y = <span class="hljs-string">&#x27;554&#x27;</span> + <span class="hljs-number">8</span>;<span class="hljs-comment">//5548</span><br></code></pre></td></tr></table></figure><p>The functions converting string that represents a number to number: <code>parseInt(string, &lt;radix&gt;)</code> and <code>parseFloat()</code>. </p><p>Another way is ‘+’: <code>(+&#39;1.1&#39;) + (+&#39;1.1&#39;)// =2.2</code></p><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2>]]></content>
    
    
    <categories>
      
      <category>Technology</category>
      
      <category>Language</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/28/hello-world/"/>
    <url>/2022/08/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
